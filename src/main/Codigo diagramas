---------- diagrama 1 -----------

@startuml
abstract class Bloque{
+ejecutar(presonaje:Personaje)
}
class BloqueLapizArriba{
+ejecutar(presonaje:Personaje)
}
class BloqueLapizAbajo{
+ejecutar(presonaje:Personaje)
}
class BloqueMovimiento{
+ejecutar(presonaje:Personaje)
}
class BloqueAlgoritmo{
+ejecutar(presonaje:Personaje)
+agregarBloque(unBloque:Bloque)
}
class BloqueRepetirDosVeces{
+ejecutar(presonaje:Personaje)
}
class BloqueRepetirTresVeces{
+ejecutar(presonaje:Personaje)
}
class Lapiz{
+levantarLapiz() : EstadoLapiz
+bajarLapiz() : EstadoLapiz
+pintar(posicion : Posicion)
}
Interface EstadoLapiz{
+levantarLapiz() : EstadoLapiz
+bajarLapiz() : EstadoLapiz
+pintar(posicion : Posicion)
}
class LapizArriba{
+levantarLapiz() : EstadoLapiz
+bajarLapiz() : EstadoLapiz
+pintar(posicion : Posicion)
}
class LapizAbajo{
+levantarLapiz() : EstadoLapiz
+bajarLapiz() : EstadoLapiz
+pintar(posicion : Posicion)
}
enum NoSePintaConLapizArribaExcepcion

Interface Movimiento{
+actualizarPosicion(posicion:Posicion)
}
class MovArriba{
+actualizarPosicion(posicion:Posicion)
}
class MovAbajo{
+actualizarPosicion(posicion:Posicion)
}
class MovDerecha{
+actualizarPosicion(posicion:Posicion)
}
class MovIzquierda{
+actualizarPosicion(posicion:Posicion)
}

class Personaje{
+mover(movimiento : Movimiento)
+levantarLapiz()
+bajarLapiz()
}

class Posicion{

-posicionX : int
-posicionY : int
+esIgualA(posicion : Posicion): boolean
+mover()
}
class Tablero{
+almacenarPosicion(posicion:Posicion)
}

EstadoLapiz <|.. LapizArriba
EstadoLapiz <|.. LapizAbajo
Lapiz *-- EstadoLapiz
Lapiz ..> NoSePintaConLapizArribaExcepcion
Bloque <|- BloqueLapizArriba
Bloque <|- BloqueLapizAbajo
Bloque <|-- BloqueMovimiento
Bloque ...> Personaje
Bloque <|-- BloqueAlgoritmo
Bloque <|-- BloqueRepetirDosVeces
Bloque <|-- BloqueRepetirTresVeces
Movimiento <|.. MovArriba
Movimiento <|.. MovAbajo
Movimiento <|.. MovDerecha
Movimiento <|.. MovIzquierda
Posicion <. Movimiento
Personaje *- Lapiz
Personaje *--Posicion
Personaje --> Tablero
Tablero *-- "*" Posicion
@enduml

---------- diagrama 2 -----------

@startuml
title test01BloqueConMovimientoALaDerechaMueveUnaPosicion
test01 -> Tablero :new()
return tablero:Tablero
test01 -> MovDerecha **:new()
return movDerecha:MovDerecha
test01 -> BloqueMovimiento **:new(movDerecha)
return bloqueDerecha:BloqueMovimiento
test01 -> Posicion **:new(0,0)
return posicion:Posicion
test01 -> Personaje **:new(posicion,tablero)
return personaje:Personaje

test01 -> "bloqueDerecha:BloqueMovimiento" **:ejercutar(personaje)
"bloqueDerecha:BloqueMovimiento" -> "personaje:Personaje" **:mover(movDerecha)
"personaje:Personaje" -> "movDerecha:MovDerecha" **:actualizarPosicion(posicion)
"movDerecha:MovDerecha" -> "posicion:Posicion" **:moverDerecha(posicion)
@enduml

----------- diagrama 3 ----------------

@startuml
title test01BloqueInvertirComportamientoTest
test01 -> BloqueInvertirComportamiento :new()
BloqueInvertirComportamiento -> BloqueAlgoritmo **:new()
BloqueAlgoritmo -> ArrayList **:new()
return listaBloques:ArrayList<Bloque>
BloqueAlgoritmo --> BloqueInvertirComportamiento : bloque:BloqueAlgoritmo
BloqueInvertirComportamiento --> test01 : bloqInvertir:BloqueInvertirComportamiento

test01 -> BloqueMovimiento **:new( new MovDerecha)
return bloqDerecha:BloqueMovimiento
test01 -> BloqueMovimiento :new( new MovArriba)
return bloqArriba:BloqueMovimiento
test01 -> BloqueMovimiento :new( new MovIzquierda)
return bloqIzquierda:BloqueMovimiento

test01 -> “bloqInvertir:BloqueInvertirComportamiento” **:agregarBloque(bloqDerecha)
test01 -> “bloqInvertir:BloqueInvertirComportamiento” :agregarBloque(bloqArriba)
test01 -> “bloqInvertir:BloqueInvertirComportamiento” :agregarBloque(bloqIzquierda)

test01 -> “bloqInvertir:BloqueInvertirComportamiento”  :ejecutar(unPj, unMapa)
“bloqInvertir:BloqueInvertirComportamiento”  -> “bloque:BloqueAlgoritmo” **:obtenerBloqueInvertido()
return bloqInvertidos:BloqueAlgoritmo
@enduml



@startuml
test01 -> “bloqInvertir:BloqueInvertirComportamiento” **:agregarBloque(bloqDerecha)
“bloqInvertir:BloqueInvertirComportamiento” -> “bloque:BloqueAlgoritmo” **:agregarBloque(bloqDerecha)
collections “listaBloques:ArrayList<Bloque>“
“bloque:BloqueAlgoritmo” -> “listaBloques:ArrayList<Bloque>“ **:add(bloqDerecha)

test01 -> “bloqInvertir:BloqueInvertirComportamiento” :agregarBloque(bloqArriba)
“bloqInvertir:BloqueInvertirComportamiento” -> “bloque:BloqueAlgoritmo” :agregarBloque(bloqArriba)
“bloque:BloqueAlgoritmo” -> “listaBloques:ArrayList<Bloque>“ :add(bloqArriba)

test01 -> “bloqInvertir:BloqueInvertirComportamiento” :agregarBloque(bloqIzquierda)
“bloqInvertir:BloqueInvertirComportamiento” -> “bloque:BloqueAlgoritmo” :agregarBloque(bloqIzquierda)
“bloque:BloqueAlgoritmo” -> “listaBloques:ArrayList<Bloque>“ :add(bloqIzquierda)

test01 -> Posicion **:new(0,0)
return posicion:Posicion
test01 -> Personaje **:new(posicion)
return unPj:Personaje
test01 -> Mapa **:new()
return unMapa:Mapa
@enduml



@startuml
"bloqInvertir:BloqueInvertirComportamiento" -> "bloque:BloqueAlgoritmo" **:obtenerBloqueInvertido()
"bloque:BloqueAlgoritmo" -> BloqueAlgoritmo **:new()
BloqueAlgoritmo -> ArrayList **:new()
return listaBloquesInvertidos:ArrayList<Bloque>
BloqueAlgoritmo -> "bloque:BloqueAlgoritmo" :bloqInvertidos:BloqueAlgoritmo


collections "listaBloques:ArrayList<Bloque>"
loop
"bloque:BloqueAlgoritmo" -> "listaBloques:ArrayList<Bloque>" **:obtenerBloqueOnvertido()
return bloqueInvertido:BloqueMovimiento
"bloque:BloqueAlgoritmo" -> "bloqInvertidos:BloqueAlgoritmo" **:agregarBloque(bloqueInvertido)
end

"bloque:BloqueAlgoritmo" --> "bloqInvertir:BloqueInvertirComportamiento" :bloqInvertidos:BloqueAlgoritmo
@enduml

-------------------------------Diagrama4------------------------------
@startuml
Title DC BloqueUI

interface BloqueUI{
+ mensaje():string
+ devolverBloque():Bloque
}

class BloqueAlgoritmoUI{
-msj:String
-bloque:BloqueAlgoritmo
}
class BloqueInvertirUI{
-msj:String
-bloque:BloqueInvertirComportamiento
}
class BloqueLapizAbajoUI{
-msj:String
-bloque:BloqueLapizAbajo
}
class BloqueLapizArribaUI{
-msj:String
-bloque:BloqueLapizArriba
}
class BloqueMoverArribaUI{
-msj:String
-bloque:BloqueMovimiento
}
class BloqueMoverAbajoUI{
-msj:String
-bloque:BloqueMovimiento
}
class BloqueMoverDerechaUI{
-msj:String
-bloque:BloqueMovimiento
}
class BloqueMoverIzquierdaUI{
-msj:String
-bloque:BloqueMovimiento
}
class BloqueRepetirDosVecesUI
class BloqueRepetirTresVecesUI

BloqueUI <|... BloqueRepetirDosVecesUI
BloqueUI <|.. BloqueRepetirTresVecesUI
BloqueUI <|... BloqueAlgoritmoUI
BloqueUI <|.. BloqueInvertirUI
BloqueUI <|... BloqueLapizAbajoUI
BloqueUI <|.. BloqueLapizArribaUI
BloqueUI <|... BloqueMoverArribaUI
BloqueUI <|.. BloqueMoverAbajoUI
BloqueUI <|... BloqueMoverDerechaUI
BloqueUI <|.. BloqueMoverIzquierdaUI
@enduml

--------------------------Diagrama5---------------------------

@startuml
Title DC BotonUI

interface BotonUI{
+ obtenerBoton():Button
+ ejecutar()
}

class BotonAgregarBloqueAlgoritmo{
-panel:ContenedorBloques
-bloque:BloqueAlgoritmo
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueInvertir{
-panel:ContenedorBloques
-bloque:BloqueAlgoritmo
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueLapizArriba{
-panel:ContenedorBloques
-msj:String
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueLapizAbajo{
-panel:ContenedorBloques
-msj:String
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueMoverArriba{
-panel:ContenedorBloques
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueMoverAbajo{
-panel:ContenedorBloques
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueMoverIzquierda{
-panel:ContenedorBloques
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueMoverDerecha{
-panel:ContenedorBloques
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueRepetirDosVeces{
-panel:ContenedorBloques
-bloque:BloqueAlgoritmo
-boton:Button
-arrastrable:Arrastrable
}
class BotonAgregarBloqueRepetirTresVeces{
-panel:ContenedorBloques
-bloque:BloqueAlgoritmo
-boton:Button
-arrastrable:Arrastrable
}
class BotonEjecutar

BotonUI <|... BotonAgregarBloqueAlgoritmo
BotonUI <|.. BotonAgregarBloqueInvertir
BotonUI <|... BotonAgregarBloqueLapizArriba
BotonUI <|.. BotonAgregarBloqueLapizAbajo
BotonUI <|... BotonAgregarBloqueMoverArriba
BotonUI <|.. BotonAgregarBloqueMoverAbajo
BotonUI <|... BotonAgregarBloqueMoverIzquierda
BotonUI <|.. BotonAgregarBloqueMoverDerecha
BotonUI <|... BotonAgregarBloqueRepetirDosVeces
BotonUI <|.. BotonAgregarBloqueRepetirTresVeces
BotonUI <|... BotonEjecutar
@enduml

-----------------------Diagrama6-------------------------------

@startuml
class ContenedorBloques{
-recoleccion:Boolean
-bloqueAEnviar:RecolectorBloques
-terminarRecoleccion:Button
-agregarBotonAlgoritmo:Button
-contenedorBoton:VBox
-contenedorBloques:VBox
-ventanaUI:Main
}

interface BotonUI{
+ obtenerBoton():Button
+ ejecutar()
}


interface BloqueUI{
+ mensaje():string
+ devolverBloque():Bloque
}

class PersonajeUI{
-personaje:Personaje
-imagen:ImageView
-offsetX:int
-offsetY:int
-ancho:Int
-alto:Int
+actualizarImagen(imagen)
}

class MapaUI{
-posicionesAActualizar:ArrayList<Posicion>
-grid:GridPane
-gridArray:PosicionUI[][]
-personaje:PersonajeUI
-posicionActual:Posicion
-imagenPJ:ImagenUI
}

class PosicionUI{
-ancho:Int
-alto:Int
}

class Main{
-botonAgregarBloqueAlgoritmo
}

ContenedorBloques *-- Main
Main *-- MapaUI
Main *-- PersonajeUI
ContenedorBloques --> "*" BloqueUI
PersonajeUI *-- PosicionUI
MapaUI *-- PosicionUI

@enduml

------------------------Diagrama7---------------------------

@startuml
class ContenedorBloques{
-recoleccion:Boolean
-bloqueAEnviar:RecolectorBloques
-terminarRecoleccion:Button
-agregarBotonAlgoritmo:Button
-contenedorBoton:VBox
-contenedorBloques:VBox
-ventanaUI:Main
}

interface BotonUI{
+ obtenerBoton():Button
+ ejecutar()
}


interface BloqueUI{
+ mensaje():string
+ devolverBloque():Bloque
}

class PersonajeUI{
-personaje:Personaje
-imagen:ImageView
-offsetX:int
-offsetY:int
-ancho:Int
-alto:Int
+actualizarImagen(imagen)
}

class MapaUI{
-posicionesAActualizar:ArrayList<Posicion>
-grid:GridPane
-gridArray:PosicionUI[][]
-personaje:PersonajeUI
-posicionActual:Posicion
-imagenPJ:ImagenUI
}

class PosicionUI{
-ancho:Int
-alto:Int
}

class Main{
-botonAgregarBloqueAlgoritmo
}

ContenedorBloques *-- Main
Main *-- MapaUI
Main *-- PersonajeUI
ContenedorBloques --> "*" BloqueUI
PersonajeUI *-- PosicionUI
MapaUI *-- PosicionUI

ContenedorBloques o-- BotonUI
Main o-- BotonUI
PersonajeUI o-- BotonUI
PosicionUI o-- BotonUI
MapaUI o-- BotonUI
BloqueUI o-- BotonUI
@enduml